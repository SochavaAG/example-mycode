(function(w,d,undefined){'use strict';function polyfill(){if('scrollBehavior' in d.documentElement.style){return}
var Element=w.HTMLElement||w.Element;var SCROLL_TIME=468;var original={scroll:w.scroll||w.scrollTo,scrollBy:w.scrollBy,elScroll:Element.prototype.scroll||scrollElement,scrollIntoView:Element.prototype.scrollIntoView};var now=w.performance&&w.performance.now?w.performance.now.bind(w.performance):Date.now;function scrollElement(x,y){this.scrollLeft=x;this.scrollTop=y}
function ease(k){return 0.5*(1-Math.cos(Math.PI*k))}
function shouldBailOut(x){if(typeof x!=='object'||x===null||x.behavior===undefined||x.behavior==='auto'||x.behavior==='instant'){return!0}
if(typeof x==='object'&&x.behavior==='smooth'){return!1}
throw new TypeError('behavior not valid')}
function findScrollableParent(el){var isBody;var hasScrollableSpace;var hasVisibleOverflow;do{el=el.parentNode;isBody=el===d.body;hasScrollableSpace=el.clientHeight<el.scrollHeight||el.clientWidth<el.scrollWidth;hasVisibleOverflow=w.getComputedStyle(el,null).overflow==='visible'}while(!isBody&&!(hasScrollableSpace&&!hasVisibleOverflow));isBody=hasScrollableSpace=hasVisibleOverflow=null;return el}
function step(context){var time=now();var value;var currentX;var currentY;var elapsed=(time-context.startTime)/SCROLL_TIME;elapsed=elapsed>1?1:elapsed;value=ease(elapsed);currentX=context.startX+(context.x-context.startX)*value;currentY=context.startY+(context.y-context.startY)*value;context.method.call(context.scrollable,currentX,currentY);if(currentX!==context.x||currentY!==context.y){w.requestAnimationFrame(step.bind(w,context))}}
function smoothScroll(el,x,y){var scrollable;var startX;var startY;var method;var startTime=now();if(el===d.body){scrollable=w;startX=w.scrollX||w.pageXOffset;startY=w.scrollY||w.pageYOffset;method=original.scroll}else{scrollable=el;startX=el.scrollLeft;startY=el.scrollTop;method=scrollElement}
step({scrollable:scrollable,method:method,startTime:startTime,startX:startX,startY:startY,x:x,y:y})}
w.scroll=w.scrollTo=function(){if(shouldBailOut(arguments[0])){original.scroll.call(w,arguments[0].left||arguments[0],arguments[0].top||arguments[1]);return}
smoothScroll.call(w,d.body,~~arguments[0].left,~~arguments[0].top)};w.scrollBy=function(){if(shouldBailOut(arguments[0])){original.scrollBy.call(w,arguments[0].left||arguments[0],arguments[0].top||arguments[1]);return}
smoothScroll.call(w,d.body,~~arguments[0].left+(w.scrollX||w.pageXOffset),~~arguments[0].top+(w.scrollY||w.pageYOffset))};Element.prototype.scroll=Element.prototype.scrollTo=function(){if(shouldBailOut(arguments[0])){original.elScroll.call(this,arguments[0].left||arguments[0],arguments[0].top||arguments[1]);return}
smoothScroll.call(this,this,arguments[0].left,arguments[0].top)};Element.prototype.scrollBy=function(){var arg0=arguments[0];if(typeof arg0==='object'){this.scroll({left:arg0.left+this.scrollLeft,top:arg0.top+this.scrollTop,behavior:arg0.behavior})}else{this.scroll(this.scrollLeft+arg0,this.scrollTop+arguments[1])}};Element.prototype.scrollIntoView=function(){if(shouldBailOut(arguments[0])){original.scrollIntoView.call(this,arguments[0]||!0);return}
var scrollableParent=findScrollableParent(this);var parentRects=scrollableParent.getBoundingClientRect();var clientRects=this.getBoundingClientRect();if(scrollableParent!==d.body){smoothScroll.call(this,scrollableParent,scrollableParent.scrollLeft+clientRects.left-parentRects.left,scrollableParent.scrollTop+clientRects.top-parentRects.top);w.scrollBy({left:parentRects.left,top:parentRects.top,behavior:'smooth'})}else{w.scrollBy({left:clientRects.left,top:clientRects.top,behavior:'smooth'})}}}
if(typeof exports==='object'){module.exports={polyfill:polyfill}}else{polyfill()}})(window,document);
(function(global,factory){typeof exports==='object'&&typeof module!=='undefined'?factory(exports):typeof define==='function'&&define.amd?define(['exports'],factory):(factory((global.WHATWGFetch={})))}(this,(function(exports){'use strict';var support={searchParams:'URLSearchParams' in self,iterable:'Symbol' in self&&'iterator' in Symbol,blob:'FileReader' in self&&'Blob' in self&&(function(){try{new Blob();return!0}catch(e){return!1}})(),formData:'FormData' in self,arrayBuffer:'ArrayBuffer' in self};function isDataView(obj){return obj&&DataView.prototype.isPrototypeOf(obj)}
if(support.arrayBuffer){var viewClasses=['[object Int8Array]','[object Uint8Array]','[object Uint8ClampedArray]','[object Int16Array]','[object Uint16Array]','[object Int32Array]','[object Uint32Array]','[object Float32Array]','[object Float64Array]'];var isArrayBufferView=ArrayBuffer.isView||function(obj){return obj&&viewClasses.indexOf(Object.prototype.toString.call(obj))>-1}}
function normalizeName(name){if(typeof name!=='string'){name=String(name)}
if(/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)){throw new TypeError('Invalid character in header field name')}
return name.toLowerCase()}
function normalizeValue(value){if(typeof value!=='string'){value=String(value)}
return value}
function iteratorFor(items){var iterator={next:function(){var value=items.shift();return{done:value===undefined,value:value}}};if(support.iterable){iterator[Symbol.iterator]=function(){return iterator}}
return iterator}
function Headers(headers){this.map={};if(headers instanceof Headers){headers.forEach(function(value,name){this.append(name,value)},this)}else if(Array.isArray(headers)){headers.forEach(function(header){this.append(header[0],header[1])},this)}else if(headers){Object.getOwnPropertyNames(headers).forEach(function(name){this.append(name,headers[name])},this)}}
Headers.prototype.append=function(name,value){name=normalizeName(name);value=normalizeValue(value);var oldValue=this.map[name];this.map[name]=oldValue?oldValue+', '+value:value};Headers.prototype['delete']=function(name){delete this.map[normalizeName(name)]};Headers.prototype.get=function(name){name=normalizeName(name);return this.has(name)?this.map[name]:null};Headers.prototype.has=function(name){return this.map.hasOwnProperty(normalizeName(name))};Headers.prototype.set=function(name,value){this.map[normalizeName(name)]=normalizeValue(value)};Headers.prototype.forEach=function(callback,thisArg){for(var name in this.map){if(this.map.hasOwnProperty(name)){callback.call(thisArg,this.map[name],name,this)}}};Headers.prototype.keys=function(){var items=[];this.forEach(function(value,name){items.push(name)});return iteratorFor(items)};Headers.prototype.values=function(){var items=[];this.forEach(function(value){items.push(value)});return iteratorFor(items)};Headers.prototype.entries=function(){var items=[];this.forEach(function(value,name){items.push([name,value])});return iteratorFor(items)};if(support.iterable){Headers.prototype[Symbol.iterator]=Headers.prototype.entries}
function consumed(body){if(body.bodyUsed){return Promise.reject(new TypeError('Already read'))}
body.bodyUsed=!0}
function fileReaderReady(reader){return new Promise(function(resolve,reject){reader.onload=function(){resolve(reader.result)};reader.onerror=function(){reject(reader.error)}})}
function readBlobAsArrayBuffer(blob){var reader=new FileReader();var promise=fileReaderReady(reader);reader.readAsArrayBuffer(blob);return promise}
function readBlobAsText(blob){var reader=new FileReader();var promise=fileReaderReady(reader);reader.readAsText(blob);return promise}
function readArrayBufferAsText(buf){var view=new Uint8Array(buf);var chars=new Array(view.length);for(var i=0;i<view.length;i++){chars[i]=String.fromCharCode(view[i])}
return chars.join('')}
function bufferClone(buf){if(buf.slice){return buf.slice(0)}else{var view=new Uint8Array(buf.byteLength);view.set(new Uint8Array(buf));return view.buffer}}
function Body(){this.bodyUsed=!1;this._initBody=function(body){this._bodyInit=body;if(!body){this._bodyText=''}else if(typeof body==='string'){this._bodyText=body}else if(support.blob&&Blob.prototype.isPrototypeOf(body)){this._bodyBlob=body}else if(support.formData&&FormData.prototype.isPrototypeOf(body)){this._bodyFormData=body}else if(support.searchParams&&URLSearchParams.prototype.isPrototypeOf(body)){this._bodyText=body.toString()}else if(support.arrayBuffer&&support.blob&&isDataView(body)){this._bodyArrayBuffer=bufferClone(body.buffer);this._bodyInit=new Blob([this._bodyArrayBuffer])}else if(support.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(body)||isArrayBufferView(body))){this._bodyArrayBuffer=bufferClone(body)}else{this._bodyText=body=Object.prototype.toString.call(body)}
if(!this.headers.get('content-type')){if(typeof body==='string'){this.headers.set('content-type','text/plain;charset=UTF-8')}else if(this._bodyBlob&&this._bodyBlob.type){this.headers.set('content-type',this._bodyBlob.type)}else if(support.searchParams&&URLSearchParams.prototype.isPrototypeOf(body)){this.headers.set('content-type','application/x-www-form-urlencoded;charset=UTF-8')}}};if(support.blob){this.blob=function(){var rejected=consumed(this);if(rejected){return rejected}
if(this._bodyBlob){return Promise.resolve(this._bodyBlob)}else if(this._bodyArrayBuffer){return Promise.resolve(new Blob([this._bodyArrayBuffer]))}else if(this._bodyFormData){throw new Error('could not read FormData body as blob')}else{return Promise.resolve(new Blob([this._bodyText]))}};this.arrayBuffer=function(){if(this._bodyArrayBuffer){return consumed(this)||Promise.resolve(this._bodyArrayBuffer)}else{return this.blob().then(readBlobAsArrayBuffer)}}}
this.text=function(){var rejected=consumed(this);if(rejected){return rejected}
if(this._bodyBlob){return readBlobAsText(this._bodyBlob)}else if(this._bodyArrayBuffer){return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))}else if(this._bodyFormData){throw new Error('could not read FormData body as text')}else{return Promise.resolve(this._bodyText)}};if(support.formData){this.formData=function(){return this.text().then(decode)}}
this.json=function(){return this.text().then(JSON.parse)};return this}
var methods=['DELETE','GET','HEAD','OPTIONS','POST','PUT'];function normalizeMethod(method){var upcased=method.toUpperCase();return methods.indexOf(upcased)>-1?upcased:method}
function Request(input,options){options=options||{};var body=options.body;if(input instanceof Request){if(input.bodyUsed){throw new TypeError('Already read')}
this.url=input.url;this.credentials=input.credentials;if(!options.headers){this.headers=new Headers(input.headers)}
this.method=input.method;this.mode=input.mode;this.signal=input.signal;if(!body&&input._bodyInit!=null){body=input._bodyInit;input.bodyUsed=!0}}else{this.url=String(input)}
this.credentials=options.credentials||this.credentials||'same-origin';if(options.headers||!this.headers){this.headers=new Headers(options.headers)}
this.method=normalizeMethod(options.method||this.method||'GET');this.mode=options.mode||this.mode||null;this.signal=options.signal||this.signal;this.referrer=null;if((this.method==='GET'||this.method==='HEAD')&&body){throw new TypeError('Body not allowed for GET or HEAD requests')}
this._initBody(body)}
Request.prototype.clone=function(){return new Request(this,{body:this._bodyInit})};function decode(body){var form=new FormData();body.trim().split('&').forEach(function(bytes){if(bytes){var split=bytes.split('=');var name=split.shift().replace(/\+/g,' ');var value=split.join('=').replace(/\+/g,' ');form.append(decodeURIComponent(name),decodeURIComponent(value))}});return form}
function parseHeaders(rawHeaders){var headers=new Headers();var preProcessedHeaders=rawHeaders.replace(/\r?\n[\t ]+/g,' ');preProcessedHeaders.split(/\r?\n/).forEach(function(line){var parts=line.split(':');var key=parts.shift().trim();if(key){var value=parts.join(':').trim();headers.append(key,value)}});return headers}
Body.call(Request.prototype);function Response(bodyInit,options){if(!options){options={}}
this.type='default';this.status=options.status===undefined?200:options.status;this.ok=this.status>=200&&this.status<300;this.statusText='statusText' in options?options.statusText:'OK';this.headers=new Headers(options.headers);this.url=options.url||'';this._initBody(bodyInit)}
Body.call(Response.prototype);Response.prototype.clone=function(){return new Response(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})};Response.error=function(){var response=new Response(null,{status:0,statusText:''});response.type='error';return response};var redirectStatuses=[301,302,303,307,308];Response.redirect=function(url,status){if(redirectStatuses.indexOf(status)===-1){throw new RangeError('Invalid status code')}
return new Response(null,{status:status,headers:{location:url}})};exports.DOMException=self.DOMException;try{new exports.DOMException()}catch(err){exports.DOMException=function(message,name){this.message=message;this.name=name;var error=Error(message);this.stack=error.stack};exports.DOMException.prototype=Object.create(Error.prototype);exports.DOMException.prototype.constructor=exports.DOMException}
function fetch(input,init){return new Promise(function(resolve,reject){var request=new Request(input,init);if(request.signal&&request.signal.aborted){return reject(new exports.DOMException('Aborted','AbortError'))}
var xhr=new XMLHttpRequest();function abortXhr(){xhr.abort()}
xhr.onload=function(){var options={status:xhr.status,statusText:xhr.statusText,headers:parseHeaders(xhr.getAllResponseHeaders()||'')};options.url='responseURL' in xhr?xhr.responseURL:options.headers.get('X-Request-URL');var body='response' in xhr?xhr.response:xhr.responseText;resolve(new Response(body,options))};xhr.onerror=function(){reject(new TypeError('Network request failed'))};xhr.ontimeout=function(){reject(new TypeError('Network request failed'))};xhr.onabort=function(){reject(new exports.DOMException('Aborted','AbortError'))};xhr.open(request.method,request.url,!0);if(request.credentials==='include'){xhr.withCredentials=!0}else if(request.credentials==='omit'){xhr.withCredentials=!1}
if('responseType' in xhr&&support.blob){xhr.responseType='blob'}
request.headers.forEach(function(value,name){xhr.setRequestHeader(name,value)});if(request.signal){request.signal.addEventListener('abort',abortXhr);xhr.onreadystatechange=function(){if(xhr.readyState===4){request.signal.removeEventListener('abort',abortXhr)}}}
xhr.send(typeof request._bodyInit==='undefined'?null:request._bodyInit)})}
fetch.polyfill=!0;if(!self.fetch){self.fetch=fetch;self.Headers=Headers;self.Request=Request;self.Response=Response}
exports.Headers=Headers;exports.Request=Request;exports.Response=Response;exports.fetch=fetch;Object.defineProperty(exports,'__esModule',{value:!0})})));
!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n():"function"==typeof define&&define.amd?define(n):n()}(0,function(){"use strict";function e(e){var n=this.constructor;return this.then(function(t){return n.resolve(e()).then(function(){return t})},function(t){return n.resolve(e()).then(function(){return n.reject(t)})})}function n(e){return!(!e||"undefined"==typeof e.length)}function t(){}function o(e){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=undefined,this._deferreds=[],c(e,this)}function r(e,n){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,o._immediateFn(function(){var t=1===e._state?n.onFulfilled:n.onRejected;if(null!==t){var o;try{o=t(e._value)}catch(r){return void f(n.promise,r)}i(n.promise,o)}else(1===e._state?i:f)(n.promise,e._value)})):e._deferreds.push(n)}function i(e,n){try{if(n===e)throw new TypeError("A promise cannot be resolved with itself.");if(n&&("object"==typeof n||"function"==typeof n)){var t=n.then;if(n instanceof o)return e._state=3,e._value=n,void u(e);if("function"==typeof t)return void c(function(e,n){return function(){e.apply(n,arguments)}}(t,n),e)}e._state=1,e._value=n,u(e)}catch(r){f(e,r)}}function f(e,n){e._state=2,e._value=n,u(e)}function u(e){2===e._state&&0===e._deferreds.length&&o._immediateFn(function(){e._handled||o._unhandledRejectionFn(e._value)});for(var n=0,t=e._deferreds.length;t>n;n++)r(e,e._deferreds[n]);e._deferreds=null}function c(e,n){var t=!1;try{e(function(e){t||(t=!0,i(n,e))},function(e){t||(t=!0,f(n,e))})}catch(o){if(t)return;t=!0,f(n,o)}}var a=setTimeout;o.prototype["catch"]=function(e){return this.then(null,e)},o.prototype.then=function(e,n){var o=new this.constructor(t);return r(this,new function(e,n,t){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof n?n:null,this.promise=t}(e,n,o)),o},o.prototype["finally"]=e,o.all=function(e){return new o(function(t,o){function r(e,n){try{if(n&&("object"==typeof n||"function"==typeof n)){var u=n.then;if("function"==typeof u)return void u.call(n,function(n){r(e,n)},o)}i[e]=n,0==--f&&t(i)}catch(c){o(c)}}if(!n(e))return o(new TypeError("Promise.all accepts an array"));var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);for(var f=i.length,u=0;i.length>u;u++)r(u,i[u])})},o.resolve=function(e){return e&&"object"==typeof e&&e.constructor===o?e:new o(function(n){n(e)})},o.reject=function(e){return new o(function(n,t){t(e)})},o.race=function(e){return new o(function(t,r){if(!n(e))return r(new TypeError("Promise.race accepts an array"));for(var i=0,f=e.length;f>i;i++)o.resolve(e[i]).then(t,r)})},o._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){a(e,0)},o._unhandledRejectionFn=function(e){void 0!==console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var l=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw Error("unable to locate global object")}();"Promise"in l?l.Promise.prototype["finally"]||(l.Promise.prototype["finally"]=e):l.Promise=o});
"use strict";
(function() {
    var arr = [window.Element, window.CharacterData, window.DocumentType];
    var args = [];

    arr.forEach(function (item) {
        if (item) {
            args.push(item.prototype);
        }
    });

    (function (arr) {
        arr.forEach(function (item) {
            if (item.hasOwnProperty('remove')) {
                return;
            }
            Object.defineProperty(item, 'remove', {
                configurable: true,
                enumerable: true,
                writable: true,
                value: function remove() {
                    this.parentNode.removeChild(this);
                }
            });
        });
    })(args);
})();

(function(ELEMENT) {
    ELEMENT.matches = ELEMENT.matches || ELEMENT.mozMatchesSelector || ELEMENT.msMatchesSelector || ELEMENT.oMatchesSelector || ELEMENT.webkitMatchesSelector;
    ELEMENT.closest = ELEMENT.closest || function closest(selector) {
        if (!this) return null;
        if (this.matches(selector)) return this;
        if (!this.parentElement) {return null}
        else return this.parentElement.closest(selector)
    };
}(Element.prototype));

if(!String.prototype.includes){
    console.log(document.body.classList.add('i-explorer'));
}

if(!Array.prototype.forEach){
    Array.prototype.forEach = function (cb) {
        for(let i = 0; i < this.length; i++){
            cb(this[i], i, this);
        }
    }
}

if(!NodeList.prototype.forEach){
    NodeList.prototype.forEach = function (cb) {
        for(let i = 0; i < this.length; i++){
            cb(this[i], i, this);
        }
    }
}

if(!NodeList.prototype.reduce){
    NodeList.prototype.reduce = function (cb, init) {
        let result = init || 0;
        for(let i = 0; i < this.length; i++){
            result = cb(result, this[i], i);
        }
        return result;
    };
}

if(!HTMLCollection.prototype.forEach){
    HTMLCollection.prototype.forEach = function (cb) {
        for(let i = 0; i < this.length; i++){
            cb(this[i], i, this);
        }
    }
}

function mouseMoveX(selector, spedX) {
    const sel = document.querySelectorAll(selector);

    sel.forEach( function (item) {
        let itemWidth = item.clientWidth;
        item.addEventListener('mousemove', function (event) {
            let trX = event.clientX - itemWidth;
            const trans = item.children;
            for (let i = 0; i < trans.length; i++) {
                trans[i].style.transform = 'translateX(' + trX / (spedX * (trans.length - i)) + 'px)  rotate(0.01deg)';
            }
        })
    });
}

function mouseMoveXX(selector) {
    var sel = document.querySelectorAll(selector),
        windowWidth = window.innerWidth / 2;
    window.addEventListener('mousemove', function (event) {
        var trX = event.clientX - windowWidth;

        for (var i = 0; i < sel.length; i++) {
            sel[i].style.transform = 'translateX(' + trX / sel[i].dataset.sped + 'px)  rotate(0.01deg)';
        }
    });
}

mouseMoveX('.man img', -50);

mouseMoveX('.preload_img', -75);

mouseMoveX('.casein_preview__block', -75);

// mouseMoveXX('.casein_site__parallax img');
document.querySelectorAll('.casein_site__parallax img').forEach(function (item) {
    item.style.animationDelay = (Math.random() * (2.8 - 0.1) + 0.1) + 's'
});
document.querySelectorAll('.casein_num').forEach(function (item, i) {
    item.querySelector('span').textContent = '0' + (i + 1).toString();
});

function inPage(selector){
    return  document.querySelector(selector);
}

function scrollElemAdd(selector, selectorChange, param) {
    window.addEventListener('load', scrollElem);
    window.addEventListener('scroll', scrollElem);

    function scrollElem() {
        var scrollElement = document.querySelectorAll(selector);

        for (var i = 0; i < scrollElement.length; i++) {
            var coordinateTop = scrollElement[i].getBoundingClientRect().top,
                elementHeight = scrollElement[i].getBoundingClientRect().height,
                windowHeight = document.documentElement.clientHeight,
                result = coordinateTop > 0 - elementHeight && coordinateTop < windowHeight - 10;

            if (param === 'add') {
                if (result) {
                    scrollElement[i].classList.add(selectorChange);
                }
            } else if (param === 'addRem') {
                if (result) {
                    scrollElement[i].classList.add(selectorChange);
                } else {
                    scrollElement[i].classList.remove(selectorChange);
                }
            } else {
                console.log('param error');
            }
        }
    }
}

scrollElemAdd('.reval', 'reval--anim', 'add');

function tabs(btnsSelector, tabsSelector, btnActive, contentActive){

    const tabBtns = document.querySelectorAll(btnsSelector);
    const tabCont = document.querySelectorAll(tabsSelector);

    // let pos = 1;
    // tabBtns.forEach( (item) => {
    //     item.addEventListener('click', function () {
    //         document.querySelector('[data-btn="'+ pos +'"]').classList.remove(btnActive);
    //         this.classList.add(btnActive);
    //         document.querySelector('[data-content="'+ pos +'"]').classList.remove(contentActive);
    //         document.querySelector('[data-content="'+ this.dataset.btn +'"]').classList.add(contentActive);
    //         pos = +this.dataset.btn;
    //     })
    // });

    for (var i = 0; i < tabBtns.length; i++) {

        tabBtns[i].addEventListener('click', function () {
            for (var i = 0; i < tabBtns.length; i++) {
                tabBtns[i].classList.remove(btnActive)
            }
            this.classList.add(btnActive);
            var btnAtr = +this.dataset.btn;
            for(var j = 0; j < tabCont.length; j++){
                tabCont[j].classList.remove(contentActive);
                var contAtr = +tabCont[j].dataset.content;

                if(btnAtr === contAtr){
                    tabCont[j].classList.add(contentActive);

                    tabCont[j].style.animationDelay = ''+ 0.1 * j +'s'
                }
                if(btnAtr === 0){
                    tabCont[j].classList.add(contentActive);
                }
            }
        })
    }

}

tabs('.case_second_btn', '.cases .case', 'active', 'active');
tabs('.test_btn', '.testing__col', 'active', 'active');


function tabsCase(btnsSelector, tabsSelector, btnActive, contentActive){

    const tabBtns = document.querySelectorAll(btnsSelector);
    const tabCont = document.querySelectorAll(tabsSelector);
    let widthTransform = 0;
    let widthTransformActive = 0;
    const MARGINLEFT = 20;

    for (var i = 0; i < tabBtns.length; i++) {

        tabBtns[i].addEventListener('click', function () {
            widthTransform = 0;
            widthTransformActive = 0;
            for (var i = 0; i < tabBtns.length; i++) {
                tabBtns[i].classList.remove(btnActive)
            }
            this.classList.add(btnActive);
            var btnAtr = +this.dataset.btn;
            for(var j = 0; j < tabCont.length; j++){

                if(widthTransform){
                    tabCont[j].style.transform = 'translateX(-'+ (widthTransform) +'px)';
                }

                widthTransform += tabCont[j].clientWidth + MARGINLEFT;

                tabCont[j].classList.remove(contentActive);

                var contAtr = +tabCont[j].dataset.content;
                if(btnAtr === contAtr){
                    tabCont[j].classList.add(contentActive);

                    if(widthTransformActive){
                        tabCont[j].style.transform = 'translateX('+ (-widthTransformActive) +'px)';
                    }

                } else {
                    widthTransformActive += tabCont[j].clientWidth + MARGINLEFT;
                }
                if(btnAtr === 0){
                    tabCont[j].classList.add(contentActive);

                    tabCont[j].style.transform = 'translateX(0px)';
                }
                document.querySelector('.case_second--content').click();
            }
        })
    }

}

tabsCase('.case_head_btn', '.case_second_btn', 'active', 'case_second--content');


var section_1 = document.getElementById("section_1");

if(inPage('.menu')) {
    var menu = document.getElementById("menu");
    var block_menu = document.getElementById("block_menu");
    var $body = document.querySelector("body");
    menu.addEventListener("click", function(){
        this.classList.toggle("show");
        block_menu.classList.toggle("show");
        $body.classList.toggle("show_nav");
    });

    const lang = document.querySelector('.lang');

    lang.addEventListener('click', function () {
        this.classList.toggle('lang--open');
    });

    document.addEventListener('click', function (event) {
        let target = event.target;

        if(!target.closest('.lang')){
            lang.classList.remove('lang--open');
        }
    });
}


document.querySelectorAll('.vacancies_box').forEach(function (item, i, arr) {
    item.addEventListener('click', function (event) {
        const target = event.target;
        const currTarget = event.currentTarget;

        if(target.closest('.vacancies_box__title')){
            if(!currTarget.classList.contains('active')){
                currTarget.classList.add('active');

                let h = item.querySelector('.vacancies_box__text--container').clientHeight;
                item.querySelector('.vacancies_box__text').style.height = h + 'px';

            } else {
                currTarget.classList.remove('active');
                item.querySelector('.vacancies_box__text').style.height = '0px';
            }
        }
    })
});

if(inPage('.header')){
    var header = document.querySelector(".header");

    window.addEventListener('scroll', function () {
        if((this.pageYOffset > window.innerHeight - header.clientHeight) && inPage('.section_1')){
            header.classList.add('header--bg')
        } else if((this.pageYOffset > 0) && !inPage('.section_1')) {
            header.classList.add('header--bg')
        } else {
            header.classList.remove('header--bg')
        }
    });
}

// only home



if(inPage('.case_filter__second__box')){

    const tabsArrowSecond = document.querySelector('.case_filter__second .tabs_arrow');
    const clientsTabsBoxSecond = document.querySelector('.case_filter__second__box');
    const LEFT_SCROLL = 100;

    tabsArrowSecond.addEventListener('click', function () {
        clientsTabsBoxSecond.scrollBy({ top: 0, left: LEFT_SCROLL, behavior: 'smooth' });
    });

    const tabsArrowHead = document.querySelector('.case_filter_head .tabs_arrow');
    const clientsTabsBoxHead = document.querySelector('.case_filter_head__box');

    tabsArrowHead.addEventListener('click', function () {
        clientsTabsBoxHead.scrollBy({ top: 0, left: LEFT_SCROLL, behavior: 'smooth' });
    });
}






// case video

// const caseVideo = document.querySelectorAll('.case_video');
// let pos;
// let videoHeight = 0;
//
// caseVideo.forEach(function (item, i) {
//     item.addEventListener('click', function () {
//         videoHeight = item.clientHeight;
//         if (pos !== undefined) {
//             caseVideo[pos].classList.remove('active');
//             caseVideo[pos].style.height = videoHeight + 'px';
//             caseVideo[pos].querySelector('video').pause();
//         }
//         pos = i;
//         this.classList.add('active');
//         this.style.height = this.querySelector('video').offsetHeight + 'px';
//         this.querySelector('video').play();
//     })
// });


// document.addEventListener('click', function (event) {
//     let target = event.target;
//
//     if(!target.closest('.case_video')){
//         if (pos !== undefined) {
//             caseVideo[pos].classList.remove('active');
//             caseVideo[pos].style.height = videoHeight + 'px';
//             caseVideo[pos].querySelector('video').pause();
//         }
//     }
// });


// /case video

if (!('ontouchstart' in window)) {
    const videoPropCont = document.querySelectorAll('.item_video');

    videoPropCont.forEach(function (item) {
        item.addEventListener('mouseenter', function () {
            var video = this.querySelector('video');

            if(!item.classList.contains('active')){

                item.classList.add('active');

                video.play();
                video.loop = false;

                video.addEventListener('ended', function () {
                    item.classList.remove('active');
                    item.classList.remove('video_end');
                    item.classList.remove('video_pause');
                });

                video.addEventListener('timeupdate', function () {
                    if((video.currentTime >= 2) && !item.classList.contains('video_end')) {
                        video.pause();
                        item.classList.add('video_pause');
                    }
                });
            }
        });

        item.addEventListener('mouseleave', function () {
            var video = this.querySelector('video');

            if(item.classList.contains('active')) {
                if(item.classList.contains('video_pause')){
                    item.classList.add('video_end');
                    video.play()
                } else {
                    item.classList.add('video_end');
                }
            }

        });

    });
} else {
    if (inPage('.section_2')){
        window.addEventListener('scroll', function () {
            document.querySelectorAll('.item_video').forEach(function (item) {
                var video = item.querySelector('video');

                if((item.getBoundingClientRect().top > document.documentElement.clientHeight/10) && (item.getBoundingClientRect().top < document.documentElement.clientHeight/2)) {
                    if(!item.classList.contains('resp_active')) {
                        video.play();
                        video.loop = false;
                        video.addEventListener('timeupdate', function () {
                            if((video.currentTime >= 2) && !item.classList.contains('resp_pause') && !item.classList.contains('resp_under')) {
                                video.pause();
                                item.classList.add('resp_pause');
                            }
                        });
                        video.addEventListener('ended', function () {
                            item.classList.remove('resp_pause');
                            item.classList.remove('resp_active');
                        });
                    }

                    item.classList.add('resp_active');
                    item.classList.remove('resp_under');
                } else {
                    if(item.classList.contains('resp_active')){
                        video.play();
                    }
                    item.classList.remove('resp_active');
                    item.classList.add('resp_under');
                }
            });
        });
    }
}


const btnAll = document.querySelectorAll('.btn');

btnAll.forEach(function (item) {
    item.addEventListener('mouseenter', function () {
        if (!this.classList.contains('btn--anim')){
            this.classList.add('btn--anim');
            let _self = this;
            setTimeout(function () {
                _self.classList.remove('btn--anim');
            }, 500)
        }
    });
});

if(inPage('.pop_up')){
    const popUp = document.querySelector('.pop_up');

    document.querySelectorAll('.btn-pop').forEach(function (item) {
        item.addEventListener('click', function (event) {
            event.preventDefault();
            popUp.classList.add('active');
        })
    });

    popUp.addEventListener('click', function (event) {

        const target = event.target;

        if(target.closest('.close') ) {
            popUp.classList.remove('active');
        } else if (target.closest('.pop_up__block') ){
            event.stopPropagation();
        } else {
            popUp.classList.remove('active');
        }
    })
}

function randomInteger(max) {
    let rand = Math.random() * (max + 1);
    return Math.floor(rand);
}

if(inPage('.ceo_p')){
    const arrD = document.querySelectorAll('.ceo_box--d .ceo_p');
    const arrS = document.querySelectorAll('.ceo_box--s .ceo_p');

    const dima = document.querySelector('.ceo_box--d');
    const shira = document.querySelector('.ceo_box--s');




    dima.addEventListener('mouseenter', function () {
        const randNum = randomInteger(arrD.length - 1);
        arrD[randNum].classList.add('active');
    });

    dima.addEventListener('click', function () {
        arrD.forEach(function (item) {
            item.classList.remove('active');
        });
        const randNum = randomInteger(arrD.length - 1);
        arrD[randNum].classList.add('active');
    });
    dima.addEventListener('mouseleave', function () {
        arrD.forEach(function (item) {
            item.classList.remove('active');
        })
    });


    shira.addEventListener('mouseenter', function () {
        const randNum = randomInteger(arrD.length - 1);
        arrS[randNum].classList.add('active');
    });

    shira.addEventListener('click', function () {
        arrS.forEach(function (item) {
            item.classList.remove('active');
        });
        const randNum = randomInteger(arrS.length - 1);
        arrS[randNum].classList.add('active');
    });

    shira.addEventListener('mouseleave', function () {
        arrS.forEach(function (item) {
            item.classList.remove('active');
        })
    });

}

function checkValue(selector) {
    document.querySelectorAll(selector).forEach( (item) => {
        item.addEventListener('blur', function () {
            if(this.value !== ''){
                this.classList.add('item_value');
            } else {
                this.classList.remove('item_value');
            }
        });
    });
}

checkValue('.inputs_box input');
checkValue('.form_descr textarea');


// text animation footer
var TxtType = function(el, toRotate, period) {
    this.toRotate = toRotate;
    this.el = el;
    this.loopNum = 0;
    this.period = parseInt(period, 10) || 2000;
    this.txt = '';
    this.tick();
    this.isDeleting = false;
};

TxtType.prototype.tick = function() {
    var i = this.loopNum % this.toRotate.length;
    var fullTxt = this.toRotate[i];

    if (this.isDeleting) {
        this.txt = fullTxt.substring(0, this.txt.length - 1);
    } else {
        this.txt = fullTxt.substring(0, this.txt.length + 1);
    }

    this.el.innerHTML = '<span>'+this.txt+'</span>';

    var that = this;
    var delta = 200 - Math.random() * 100;

    if (this.isDeleting) { delta /= 2; }

    if (!this.isDeleting && this.txt === fullTxt) {
        delta = this.period;
        this.isDeleting = true;
    } else if (this.isDeleting && this.txt === '') {
        this.isDeleting = false;
        this.loopNum++;
        delta = 500;
    }

    setTimeout(function() {
        that.tick();
    }, delta);
};

window.addEventListener('load',function() {
    var elements = document.getElementsByClassName('text_write');
    for (var i = 0; i < elements.length; i++) {
        var toRotate = elements[i].getAttribute('data-type');
        var period = elements[i].getAttribute('data-period');
        if (toRotate) {
            new TxtType(elements[i], JSON.parse(toRotate), period);
        }
    }
} );

// text animation footer


// slider

function Slider(selector, settings) {

    this.defaultSettings = {
        dots: true,
        arrows: true,
        multiSlide: true,
        autoPlay: false,
        autoPlaySpeed: 5000,
        arrowNext: 'Next',
        arrowPrev: 'Prev',
        infinity: true,
        clone: false,
        swipe: true
    };

    if(settings){
        for (var key in settings){
            this.defaultSettings[key] = settings[key];
        }
    }

    this.slider = document.querySelector(selector);

    this.sliderArr = [];

    const _self = this;

    if(this.defaultSettings.clone) {
        let sliderBox =  this.slider.querySelector('.slider_box');
        let sliderInner =  sliderBox.innerHTML;
        sliderBox.innerHTML += sliderInner;
    }

    for(let i = 0; i < this.slider.children.length; i++){
        let sliderChild = this.slider.children[i];

        if(sliderChild.classList.contains('slider_box')){
            this.sliderArr = this.slider.children[i].children;
        }
    }

    if(this.defaultSettings.multiSlide){
        this.sliderArr[0].classList.add('slide--active');
        this.sliderArr[this.sliderArr.length - 1].classList.add('slide--prev');
        this.sliderArr[0].nextElementSibling.classList.add('slide--next');
    } else {
        this.sliderArr[0].classList.add('slide--active');
    }

    if(this.defaultSettings.autoPlay){
        this.interval = this.intervalStart();
    }

    if(this.defaultSettings.dots){
        const ul = document.createElement('ul');

        ul.classList.add('slider_dots');

        for(let i = 0; i < this.sliderArr.length; i++){
            let li = document.createElement('li');
            ul.appendChild(li)
        }

        this.slider.appendChild(ul);
        ul.firstChild.classList.add('slide--active');

        this.dotsArr = ul.children;
    }

    if(this.defaultSettings.arrows){
        const buttonPrev = document.createElement('button');
        const buttonNext = document.createElement('button');

        const spanP = document.createElement('span');
        const spanN = document.createElement('span');

        buttonPrev.classList.add('slider_arrow');
        buttonPrev.classList.add('slider_arrow--prev');
        spanP.innerHTML = this.defaultSettings.arrowPrev;
        buttonPrev.appendChild(spanP);
        buttonNext.classList.add('slider_arrow');
        buttonNext.classList.add('slider_arrow--next');
        spanN.innerHTML = this.defaultSettings.arrowNext;
        buttonNext.appendChild(spanN);

        this.slider.appendChild(buttonPrev);
        this.slider.appendChild(buttonNext);
    }

    let clX1;
    let clX2;
    const SWIPE_LENGTH = 20;

    this.slider.addEventListener('mousedown', function (event) {
        clX1 = event.clientX;
    });

    this.slider.addEventListener('click', function (event) {
        let target = event.target;

        if(target.closest('.slide--prev') || target.closest('.slider_arrow--prev') ){

            _self.slidePrev();

            _self.autoPlayStart();

        }

        if(target.closest('.slide--next')  || target.closest('.slider_arrow--next') ){

            _self.slideNext();

            _self.autoPlayStart();
        }

        if(_self.defaultSettings.swipe){
            clX2 = event.clientX;

            let res = clX1 - clX2;

            if( res < -SWIPE_LENGTH && !('ontouchstart' in window)){

                _self.slidePrev();

                _self.autoPlayStart();
            }
            if( res > SWIPE_LENGTH && !('ontouchstart' in window)){

                _self.slideNext();

                _self.autoPlayStart();
            }
        }

    });

    if(_self.defaultSettings.swipe){
        let touchX1;
        let touchX2;

        this.slider.addEventListener('touchstart', function (event) {
            touchX1 = event.changedTouches[0].clientX;
        });

        this.slider.addEventListener('touchend', function (event) {
            touchX2 = event.changedTouches[0].clientX;

            let res = touchX1 - touchX2;

            if( res < -SWIPE_LENGTH && ('ontouchstart' in window)){

                _self.slidePrev();

                _self.autoPlayStart();
            }
            if( res > SWIPE_LENGTH && ('ontouchstart' in window)){

                _self.slideNext();

                _self.autoPlayStart();
            }
        });
    }



    // if(this.defaultSettings.autoPlay){
    //     setInterval(function ()  {
    //         const currentIdx = _self.currentIndex();
    //
    //         _self.slideMultiOneNext(currentIdx);
    //         _self.slideDotsNext(currentIdx)
    //
    //     }, this.defaultSettings.autoPlaySpeed)
    // }

}

Slider.prototype.intervalStart = function () {
    const _self = this;
    return setInterval(function () {
        _self.slideNext();
    }, 3000)
};

Slider.prototype.autoPlayStart = function () {
    if(this.defaultSettings.autoPlay){
        clearInterval(this.interval);
        this.interval = this.intervalStart();
    }

};

Slider.prototype.currentIndex = function (arr){
    // return [].findIndex.call(sliderArr,  elem => elem.classList.contains('slide--active'));
    let index = 0;

    for (let i = 0; i < this.sliderArr.length; i++){
        if(this.sliderArr[i].classList.contains('slide--active')){
            index = i;
        }
    }
    return index;
};

Slider.prototype.slideMultiPrev = function (index, arr){
    if(index === 0 && !this.defaultSettings.infinity) {

    } else if(index === 0){
        this.removeSlideClass(arr);
        arr[arr.length - 1].classList.add('slide--active');
        arr[arr.length - 2].classList.add('slide--prev');
        this.sliderArr[index].classList.add('slide--next');
    } else if(index === 1){
        this.removeSlideClass(arr);
        arr[index - 1].classList.add('slide--active');
        arr[arr.length - 1].classList.add('slide--prev');
        arr[index].classList.add('slide--next');
    } else{
        this.removeSlideClass(arr);
        arr[index - 1].classList.add('slide--active');
        arr[index - 2].classList.add('slide--prev');
        arr[index].classList.add('slide--next');
    }
};

Slider.prototype.slideMultiNext = function (index, arr){
    if(index === arr.length - 1 && !this.defaultSettings.infinity){

    }else if(index === arr.length - 2){
        this.removeSlideClass(arr);
        arr[index + 1].classList.add('slide--active');
        arr[index].classList.add('slide--prev');
        arr[0].classList.add('slide--next');
    }
    else if(index === arr.length - 1){
        this.removeSlideClass(arr);
        arr[0].classList.add('slide--active');
        arr[arr.length - 1].classList.add('slide--prev');
        arr[1].classList.add('slide--next');
    }
    else{
        this.removeSlideClass(arr);
        arr[index + 1].classList.add('slide--active');
        arr[index].classList.add('slide--prev');
        arr[index + 2].classList.add('slide--next');
    }
};

Slider.prototype.removeSlideClass = function (arr){
    // [].forEach.call(sliderArr,  elem => elem.classList.remove('slide--active', 'slide--prev', 'slide--next'));
    for (let i = 0; i < arr.length; i++){
        arr[i].classList.remove('slide--active');
        arr[i].classList.remove( 'slide--prev');
        arr[i].classList.remove('slide--next');
    }
};

Slider.prototype.slidePrevOne = function (index, arr){
    if(index === 0 && !this.defaultSettings.infinity){

    } else if (index === 0){
        this.removeSlideClass(arr);
        arr[arr.length - 1].classList.add('slide--active');
    } else {
        this.removeSlideClass(arr);
        arr[index - 1].classList.add('slide--active');
    }
};

Slider.prototype.slideNextOne = function (index, arr){
    if((index === (arr.length - 1)) && !this.defaultSettings.infinity){

    } else if(index === (arr.length - 1)){
        this.removeSlideClass(arr);
        arr[0].classList.add('slide--active');
    } else{
        this.removeSlideClass(arr);
        arr[index + 1].classList.add('slide--active');
    }
};

Slider.prototype.slideNext = function (){
    let currentIndex = this.currentIndex();

    if(this.defaultSettings.multiSlide){
        this.slideMultiNext(currentIndex, this.sliderArr);
    } else {
        this.slideNextOne(currentIndex, this.sliderArr);
    }
    if(this.defaultSettings.dots){
        this.slideNextOne(currentIndex, this.dotsArr)
    }
};

Slider.prototype.slidePrev = function (){
    let currentIndex = this.currentIndex();

    if(this.defaultSettings.multiSlide){
        this.slideMultiPrev(currentIndex, this.sliderArr);
    } else {
        this.slidePrevOne(currentIndex, this.sliderArr)
    }
    if(this.defaultSettings.dots){
        this.slidePrevOne(currentIndex, this.dotsArr)
    }
};
Slider.prototype.slideTo = function (index) {
    if(this.defaultSettings.multiSlide){
        this.slideMultiNext(index, this.sliderArr);
    } else {
        this.slideNextOne(index, this.sliderArr);
    }
    if(this.defaultSettings.dots){
        this.slideNextOne(index, this.dotsArr)
    }
};
// Slider.prototype.slideDotsPrev = function (){
//     if(this.defaultSettings.dots){
//         this.slidePrevOne(this.currentIndex(), this.dotsArr)
//     }
// };
// Slider.prototype.slideDotsNext = function (){
//     if(this.defaultSettings.dots){
//         this.slideNextOne(this.currentIndex(), this.dotsArr)
//     }
// };

// /slider

function SliderPage(selector) {

    this.slider = document.querySelector(selector);

    this.sliderArr = [];

    const _self = this;

    for(let i = 0; i < this.slider.children.length; i++){
        let sliderChild = this.slider.children[i];

        if(sliderChild.classList.contains('slider_box')){
            this.sliderArr = this.slider.children[i].children;
        }
    }
    this.sliderArr[0].classList.add('slide--active');

}
SliderPage.prototype.currentIndex = function (){
    let index = 0;

    for (let i = 0; i < this.sliderArr.length; i++){
        if(this.sliderArr[i].classList.contains('slide--active')){
            index = i;
        }
    }
    return index;
};
SliderPage.prototype.slidePrevOne = function (index, arr){
    if(index === 0){
        this.removeSlideClass();
        arr[arr.length - 1].classList.add('slide--active');
    } else{
        this.removeSlideClass();
        arr[index - 1].classList.add('slide--active');
    }
};
SliderPage.prototype.slideNextOne = function (index, arr){
    if(index === (arr.length - 1)){
        this.removeSlideClass();
        arr[0].classList.add('slide--active');
    } else{
        this.removeSlideClass();
        arr[index + 1].classList.add('slide--active');
    }
};
SliderPage.prototype.slideNext = function (){
    let currentIndex = this.currentIndex();
    this.slideNextOne(currentIndex, this.sliderArr)
};
SliderPage.prototype.slidePrev = function (){
    let currentIndex = this.currentIndex();
    this.slidePrevOne(currentIndex, this.sliderArr)
};

SliderPage.prototype.removeSlideClass = function (){
    for (let i = 0; i < this.sliderArr.length; i++){
        this.sliderArr[i].classList.remove('slide--active');
    }
};
SliderPage.prototype.slideTo = function (index) {
    this.slideNextOne(index, this.sliderArr)
};

function transformElementView(selector){
    window.addEventListener('load', transformElement);
    window.addEventListener('scroll', transformElement);
    function transformElement() {
        var sel = document.querySelectorAll(selector);
        for (var i = 0; i < sel.length; i++) {
            var coordinateTop = sel[i].getBoundingClientRect().top,
                elementHeigth = sel[i].getBoundingClientRect().height,
                windowHeigth = window.innerHeight,
                onView = coordinateTop > 0-elementHeigth && coordinateTop < windowHeigth-20,
                speed = +sel[i].dataset.sped,
                result = coordinateTop - windowHeigth;
            if (onView) {
                sel[i].style.transform = 'translateY(' + result/speed + 'px)';
            }
        }
    }
}
function transformElementViewM(selector, koef, elem){
    window.addEventListener('load', transformElement);
    window.addEventListener('scroll', transformElement);

    var sel = document.querySelectorAll(selector);
    var KOEF = 1;

    sel.forEach(function (item, i) {
        item.dataset.sped = sel.length + koef - i;
    });

    function transformElement() {
        for (var i = 0; i < sel.length; i++) {
            var coordinateTop = sel[i].getBoundingClientRect().top,
                windowHeight = window.innerHeight,
                onView = coordinateTop > 0 && coordinateTop < windowHeight + 100;
            if (onView) {
                var el = sel[i];
                var img = sel[i].querySelector(elem);
                var numb = (coordinateTop) / el.dataset.sped;
                if(window.innerWidth < 900){
                    numb = coordinateTop / (el.dataset.sped * 3);
                }
                if(numb < 0){
                    numb = 0;
                }
                img.style.transform = 'translateY('+ numb +'px) rotate(0.01deg)';
            }
        }
    }
}

transformElementView('.casein_responsive__table img');
transformElementView('.casein_responsive__phone img');
// transformElementView('.casein_page__box img');


transformElementViewM('.casein_page__box', 4, 'img');
transformElementViewM('.casein_page__resp', 3, 'img');
transformElementViewM('.casein_brand__block', 4, 'img');
transformElementViewM('.casein_video__block', 4, 'video');

// transformElementViewM('.casein_other__block--1 .casein_other__box', 4, 'img');
// transformElementViewM('.casein_other__block--2 .casein_other__box', 4, 'img');
// transformElementViewM('.casein_other__block--3 .casein_other__box', 4, 'img');
// transformElementViewM('.casein_other__block--4 .casein_other__box', 4, 'img');
// transformElementViewM('.casein_other__block--5 .casein_other__box', 4, 'img');

document.querySelectorAll('.casein_other__block').forEach(function (item, i) {
    item.classList.add(`casein_other__block--${i+1}`);
    transformElementViewM(`.casein_other__block--${i+1} .casein_other__box`, 4, 'img');
});

function newTransform(selector, speed){
    window.addEventListener('load', transformElement);
    window.addEventListener('scroll', transformElement);
    function transformElement() {
        var sel = document.querySelectorAll(selector);
        for (var i = 0; i < sel.length; i++) {
            var coordinateTop = sel[i].getBoundingClientRect().top;
            var elementHeigth = sel[i].getBoundingClientRect().height;
            var windowHeigth = window.innerHeight;
            var onView = coordinateTop > 0-elementHeigth && coordinateTop < windowHeigth-20;
            var result = coordinateTop - windowHeigth;
            if (onView) {
                sel[i].style.transform = 'translateY(' + window.pageYOffset/speed + 'px)';
            }
        }
    }
}

newTransform('.board img', 10);

function SliderSwipe(selector, settings){

    this.defaultSettings = {
        progress: false
    };

    if(settings){
        for (var key in settings){
            this.defaultSettings[key] = settings[key];
        }
    }

    let start = 0;
    let startX = 0;
    let startXX = 0;
    let banSliderBoxWidth = 0;
    let banSliderWidth = 0;
    let rightEnd = 0;

    this.container = document.querySelector(selector);

    const _self = this;

    if(this.defaultSettings.progress && !this.inSel('.progress_container')){
        this.div = document.createElement('div');
        this.divP = document.createElement('div');
        this.div.classList.add('progress_container');
        this.divP.classList.add('progress');
        this.div.appendChild(this.divP);
        this.container.parentNode.appendChild(this.div);
    }

    function f() {

        banSliderWidth = _self.container.parentNode.clientWidth;
        rightEnd = banSliderBoxWidth - banSliderWidth;

        startX =  startXX - (event.clientX - start);

        if('ontouchstart' in window){
            startX =  startXX - (event.changedTouches[0].clientX - start);
        }

        if(startX < 0){
            startX = 0;
        }

        if(startX > rightEnd){
            startX = rightEnd;
        }

        this.style.transform = 'translateX('+ -startX +'px)';

        if(_self.defaultSettings.progress){
            let transformP = ((_self.div.clientWidth - _self.divP.clientWidth)/100) * (startX/(rightEnd/100));
            _self.divP.style.transform = 'translateX('+ transformP +'px)'
        }

    }


    let banSlides = this.container.children;

    banSlides.forEach(function (item) {
        banSliderBoxWidth += item.clientWidth;
    });


    this.container.style.width = banSliderBoxWidth + 'px';

    banSliderWidth = this.container.parentNode.clientWidth;
    rightEnd = banSliderBoxWidth - banSliderWidth;

    this.container.addEventListener('mousedown', function (e) {

        start = e.clientX;
        if(banSliderWidth < banSliderBoxWidth){
            this.addEventListener('mousemove', f)
        }
    });

    this.container.addEventListener('mouseup', function (e) {
        startXX = startX;
        this.removeEventListener('mousemove', f)
    });

    this.container.addEventListener('touchstart', function (e) {

        start = e.changedTouches[0].clientX;
        if(banSliderWidth < banSliderBoxWidth){
            this.addEventListener('touchmove', f)
        }

    });

    this.container.addEventListener('touchend', function (e) {
        startXX = startX;
        this.removeEventListener('touchmove', f)
    });

    this.container.ondragstart = function () {
        return false;
    }
}

SliderSwipe.prototype.inSel = function (selector){
    return  this.container.parentNode.querySelector(selector);
};
// function Cursor(selector){
//     this.cursor = document.querySelectorAll(selector);
//     const _self = this;
//
//     window.addEventListener('mousemove', function (e){
//         _self.cursor.forEach(function (item) {
//             const cursorHeigth = item.getBoundingClientRect().height/2,
//                 cursorWidth = item.getBoundingClientRect().width/2,
//                 trX = e.clientX - cursorWidth,
//                 trY = e.clientY - cursorHeigth;
//             item.style.transform = 'translate3d(' + trX + 'px, ' + trY + 'px, 0)';
//         });
//
//     });
// }
function Cursor(selector, elem){
    this.cursor = document.querySelectorAll(selector);
    this.block = document.querySelectorAll(elem);

    const _self = this;

    function move() {
        _self.cursor.forEach(function (item) {
            item.classList.add('active');
            const cursorHeigth = item.getBoundingClientRect().height/2,
                cursorWidth = item.getBoundingClientRect().width/2,
                trX = event.clientX - cursorWidth,
                trY = event.clientY - cursorHeigth;
            item.style.transform = 'translate3d(' + trX + 'px, ' + trY + 'px, 0)';
        });
    }

    this.block.forEach(function (item) {
        item.addEventListener('mouseenter', function () {
            _self.cursor.forEach(function (item) {
                item.classList.add('active');
            });

            item.addEventListener('mousemove', move, false);
        });
        item.addEventListener('mouseleave', function () {
            _self.cursor.forEach(function (item) {
                item.classList.remove('active');
            });
            item.removeEventListener('mousemove', move, false)
        });
    });

    window.addEventListener('scroll', function () {
        _self.cursor.forEach(function (item) {
            item.classList.remove('active');
        });
    })

}
function CursorView(cursor, elem, clas) {
    var $cursor = document.querySelectorAll(cursor);
    var $answerContainer = document.querySelectorAll(elem);

    $answerContainer.forEach(function (item) {
        item.addEventListener('mouseenter', function () {
            $cursor.forEach(function (item) {
                item.classList.add(clas);
            });

        });
    });

    $answerContainer.forEach(function (item) {
        item.addEventListener('mouseleave', function () {
            $cursor.forEach(function (item) {
                item.classList.remove(clas);
            });
        });
    })
}

// cursor('.cursor');

function cursorCapture(selector){
    var sel = document.querySelectorAll(selector);
    for (var i = 0; i < sel.length; i++){
        sel[i].addEventListener('mousemove', function (e){
            var coordinateTop = this.getBoundingClientRect().top,
                coordinateLeft = this.getBoundingClientRect().left,
                selHeigth = this.getBoundingClientRect().height/2,
                selWidth = this.getBoundingClientRect().width/2,
                trX = e.clientX - coordinateLeft - selWidth,
                trY = e.clientY - coordinateTop - selHeigth;
            this.style.transform = 'translate3d(' + trX + 'px, ' + trY + 'px, 0)';
            this.onmouseout = function () {
                this.style.transform = 'translate3d(0, 0, 0)';
            };
        });
    }
}

//use cursorCapture('.class')

document.querySelectorAll('.casein_page__box img').forEach(function (item) {
    item.addEventListener('click', function (e) {
        e.preventDefault();

        let imgSrc = item.src;
        const div = document.createElement('div');
        const img = document.createElement('img');

        div.classList.add('ban_img_block');
        img.classList.add('ban_img_box');
        img.src = imgSrc;
        div.appendChild(img);
        document.body.appendChild(div);

        div.addEventListener('click', function (event) {
            const target = event.target;
            const currentTarget = event.currentTarget;

            if(!target.closest('.ban_img_box')){
                currentTarget.remove();
            }
        });
    })
});

window.addEventListener('load', function () {

    document.querySelectorAll('.ban_size__open').forEach(function (item, i, arr) {
        item.ondragstart = function() {
            return false;
        };
        item.addEventListener('click', function (e) {
            e.preventDefault();

            let imgSrc = item.href;
            const div = document.createElement('div');
            const img = document.createElement('img');

            div.classList.add('ban_img_block');
            img.classList.add('ban_img_box');
            img.src = imgSrc;
            div.appendChild(img);
            document.body.appendChild(div);

            div.addEventListener('click', function (event) {
                const target = event.target;
                const currentTarget = event.currentTarget;

                if(!target.closest('.ban_img_box')){
                    currentTarget.remove();
                } else {

                    const index = [].findIndex.call(arr,  elem => elem.href === imgSrc);

                    if(index + 1 !== arr.length){
                        imgSrc = arr[index + 1].href
                    } else {
                        imgSrc = arr[0].href
                    }

                    img.src = imgSrc;
                }

            });

            let touchX1;
            let touchX2;
            const SWIPE_LENGTH = 10;

            div.addEventListener('touchstart', function (event) {
                touchX1 = event.changedTouches[0].clientX;
            });

            div.addEventListener('touchend', function (event) {
                touchX2 = event.changedTouches[0].clientX;

                let res = touchX1 - touchX2;

                if( res < -SWIPE_LENGTH && ('ontouchstart' in window)){

                    const index = [].findIndex.call(arr,  elem => elem.href === imgSrc);

                    if(index !== 0){
                        imgSrc = arr[index - 1].href
                    } else {
                        imgSrc = arr[arr.length - 1].href
                    }

                    img.src = imgSrc;

                }
                if( res > SWIPE_LENGTH && ('ontouchstart' in window)){
                    const index = [].findIndex.call(arr,  elem => elem.href === imgSrc);

                    if(index + 1 !== arr.length){
                        imgSrc = arr[index + 1].href
                    } else {
                        imgSrc = arr[0].href
                    }

                    img.src = imgSrc;
                }
            });
        })
    });


});

function updateText(selector, start, end, drob) {
    const elem = selector;
    const DELAY = 100;

    end = +elem.dataset.num;

    let startNum = start + end/50;

    if(drob && end.toString().length < 5){
        elem.textContent = startNum.toFixed(drob).replace('.', ',');
    } else {
        elem.textContent = startNum.toFixed(0);
    }

    if(startNum < end) {
        setTimeout(function () {
            updateText(selector, startNum, end, drob)
        }, DELAY)
    } else {
        elem.textContent = end.toString().replace('.', ',');
    }
}

function scrollElemView(elem){
    document.querySelectorAll(elem).forEach(function (item) {
        if((item.getBoundingClientRect().top > 0 - item.getBoundingClientRect().height && item.getBoundingClientRect().top < document.documentElement.clientHeight - 20) && !item.classList.contains('count')) {
            item.classList.add('count');
            updateText(item, 0, 123291294, 2)
        }
    });
}



if(inPage('.casein_site')){

    document.querySelectorAll('.casein_site__top').forEach(function (item) {

        const caseinSiteFix = item.querySelector('.casein_site__fix');
        const noteScroll = item.querySelector('.note_scroll');
        const noteScrollBox = item.querySelector('.note_scroll__box');
        const classFixed = 'casein_site__fixed';
        const classAbsolute = 'casein_site__absolute';

        window.addEventListener('scroll', function () {

            scrollElemView('[data-num]');

            item.style.height = (caseinSiteFix.clientHeight + noteScrollBox.clientHeight - noteScroll.clientHeight) + 'px';

            let transform = item.getBoundingClientRect().top;

            if(item.getBoundingClientRect().top < 0){
                caseinSiteFix.classList.add(classFixed);

                if(-transform < (noteScrollBox.clientHeight - noteScroll.clientHeight)){
                    noteScrollBox.style.transform = 'translateY('+ transform +'px)';
                }


            } else {
                caseinSiteFix.classList.remove(classFixed);
            }

            if(-item.getBoundingClientRect().top  > (item.clientHeight - caseinSiteFix.clientHeight)){
                caseinSiteFix.classList.add(classAbsolute);
            } else {
                caseinSiteFix.classList.remove(classAbsolute);
            }
        });

        noteScroll.addEventListener('touchstart', function () {
            this.querySelector('.note_scroll_hand').classList.add('note_scroll_hand--hidden')
        })
    });

}

function ValidateForm(form) {
    this.$form = document.querySelector(form);

    this.$btn = this.$form.querySelector('.form_send button');

    const _self = this;

    this.$form.addEventListener('input', function (event) {

        const target = event.target;
        const targetName = target.dataset.name;

        if(targetName === 'fname'){
            if(!_self.checkValue(target) || !_self.checkName(target)){
                _self.addError(target);
                _self.validDataFalse(target)
            } else{
                _self.removeError(target);
                _self.validDataTrue(target)
            }
        }

        if(targetName === 'email'){
            if(!_self.checkValue(target) || !_self.checkEmail(target.value)){
                _self.addError(target);
                _self.validDataFalse(target)
            } else{
                _self.removeError(target);
                _self.validDataTrue(target)
            }
        }

        if(targetName === 'password'){
            if(!_self.checkValue(target) || !_self.checkPass(target.value)){
                _self.addError(target);
                _self.validDataFalse(target)
            } else{
                _self.removeError(target);
                _self.validDataTrue(target)
            }
        }

        if(targetName === 'text'){
            if(!_self.checkText(target)){
                _self.addError(target);
                _self.validDataFalse(target)
            } else{
                _self.removeError(target);
                _self.validDataTrue(target)
            }
        }

        if(targetName === 'tel'){
            if(!_self.checkValue(target) || !_self.checkTel(target.value)){
                _self.addError(target);
                _self.validDataFalse(target);
            } else{
                _self.removeError(target);
                _self.validDataTrue(target);
            }
        }

        if(targetName === 'value'){
            if(target.value !== 'XX XXX XXX XXXX'){
                _self.addError(target);
            } else{
                _self.removeError(target);
            }
        }

    });


    this.$form.addEventListener('change', function (event) {

        const target = event.target;
        const targetName = target.dataset.name;

        if(targetName === 'date'){
            if(!_self.checkValue(target)){
                _self.addError(target);
                _self.validDataFalse(target);
            } else{
                _self.removeError(target);
                _self.validDataTrue(target)
            }
        }


        if(targetName === 'rule'){
            if(!_self.checkCheckbox(target)){
                _self.addError(target);
                _self.validDataFalse(target)
            } else{
                _self.removeError(target);
                _self.validDataTrue(target)
            }
        }

    });

    this.$btn.addEventListener('click', function () {
        _self.$form.querySelectorAll('[data-valid]').forEach(function (item) {
            if(item.dataset.valid === 'false'){
                _self.addError(item);
            }
        });
    })


}

ValidateForm.prototype.checkValue = function (selector) {
    return selector.value !== '';
};

ValidateForm.prototype.checkText = function (selector) {
    return selector.value.length > 5 && selector.value.length < 250;
};


ValidateForm.prototype.validDataTrue = function (selector) {
    return selector.dataset.valid = 'true';
};

ValidateForm.prototype.validDataFalse = function (selector) {
    return selector.dataset.valid = 'false';
};

ValidateForm.prototype.addError = function (selector) {
    selector.classList.add('item-error');
    selector.parentNode.classList.add('item-error');
};

ValidateForm.prototype.removeError = function (selector) {
    selector.classList.remove('item-error');
    selector.parentNode.classList.remove('item-error');
};

ValidateForm.prototype.checkForm = function () {
    return [].every.call(this.$form.querySelectorAll('[data-valid]'),function (item) {
        return item.dataset.valid === 'true';
    });
};

ValidateForm.prototype.statusYesValid = function () {
    // this.$btn.classList.add('active');
    // this.$btn.disabled = false;
};

ValidateForm.prototype.statusNotValid = function () {
    // this.$btn.classList.remove('active');
    // this.$btn.disabled = true;
};

ValidateForm.prototype.checkName = function (nameValue) {
    const name = /^[A-ZА-ЯЁЇІ \-]+$/i;
    let isName =  name.test(nameValue.value);
    if(nameValue.value[0] === '-' || nameValue.value[0] === ' '){
        isName = false;
    }
    return isName;
};

ValidateForm.prototype.checkEmail = function (emailValue) {
    const email = /^([a-zA-Z0-9_-]+\.)*[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)*\.[a-zA-Z]{2,6}$/;
    return email.test(emailValue);
};

ValidateForm.prototype.checkPass = function (passValue) {
    // const pass = /(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{8,}/g;
    const pass = /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{8,}/g;
    return pass.test(passValue);
};

ValidateForm.prototype.checkTel = function (telValue) {
    const tel = /^(?:(?:\(?(?:00|\+)([1-4]\d\d|[1-9]\d?)\)?)?[\-\.\ \\\/]?)?((?:\(?\d{1,}\)?[\-\.\ \\\/]?){0,})(?:[\-\.\ \\\/]?(?:#|ext\.?|extension|x)[\-\.\ \\\/]?(\d+))?$/i;
    return tel.test(telValue);
    // return selector.value.length > 14
};

ValidateForm.prototype.checkCheckbox = function (selector) {
    return selector.checked;
};
if(inPage('.form-send')){
    const form = new ValidateForm('.form-send');


    document.querySelector('.form-send').addEventListener('submit', function (event) {
        event.preventDefault();

        // var request = new XMLHttpRequest();
        //
        // request.withCredentials = true;
        //
        // request.open('GET', 'https://api.clickup.com/api/v2/task/6et7rb');
        //
        // request.setRequestHeader('Authorization', 'pk_2603626_AEGDSI9YVOQV7S3ISAD1S8SRBIX9QAAI');
        // request.setRequestHeader('Content-Type', 'application/json');
        //
        // request.onreadystatechange = function () {
        //     if (this.readyState === 4) {
        //         console.log('Status:', this.status);
        //         console.log('Headers:', this.getAllResponseHeaders());
        //         console.log('Body:', this.responseText);
        //     }
        // };
        //
        // request.send();

        // fetch('https://api.clickup.com/api/v2/task/6et7rb', {
        //     method: 'GET',
        //     mode: 'no-cors',
        //     headers: {
        //         'Authorization': 'pk_2603626_AEGDSI9YVOQV7S3ISAD1S8SRBIX9QAAI',
        //         'Content-Type': 'application/json'
        //     },
        // }).then(function(response) {
        //     console.log(response);
        // });

        if(form.checkForm()){
            document.querySelector('.form_done').classList.add('active');
            const _self = this;

            // fetch('action.php', {
            //     method: 'post',
            //     body: new FormData(_self)
            // }).then(function(response) {
            //     return response.json();
            // }).then(function (res) {
            //     if(res){
            //         document.querySelector('.form_done').classList.add('active');
            //
            //         _self.reset();
            //
            //         document.querySelectorAll('[data-valid]').forEach(function (item) {
            //             item.dataset.valid = 'false';
            //         });
            //
            //         // if(form.checkForm('[data-valid]')){
            //         //
            //         // } else {
            //         //     form.statusNotValid();
            //         // }
            //     }
            // })

            // var request = new XMLHttpRequest();
            //
            // request.open('POST', 'https://api.clickup.com/api/v2/list/19258/task');
            //
            // request.setRequestHeader('Authorization', 'pk_2603626_AEGDSI9YVOQV7S3ISAD1S8SRBIX9QAAI');
            // request.setRequestHeader('Content-Type', 'application/json');
            //
            // request.onreadystatechange = function () {
            //     if (this.readyState === 4) {
            //         console.log('Status:', this.status);
            //         console.log('Headers:', this.getAllResponseHeaders());
            //         console.log('Body:', this.responseText);
            //     }
            // };
            //
            // var body = {
            //     'name': 'New Task Name',
            //     'description': 'New Task Content',
            //     'assignees': [
            //         183
            //     ],
            //     'tags': [
            //         'tag name 1'
            //     ],
            //     'status': 'Remarketing',
            //     'priority': 3,
            //     'due_date': 1508369194377,
            //     'due_date_time': false,
            //     'time_estimate': 8640000,
            //     'start_date': 1567780450202,
            //     'start_date_time': false,
            //     'notify_all': true,
            //     'parent': null,
            //     'links_to': null,
            //     'custom_fields': [
            //         {
            //             'id': '0a52c486-5f05-403b-b4fd-c512ff05131c',
            //             'value': 23
            //         },
            //         {
            //             'id': '03efda77-c7a0-42d3-8afd-fd546353c2f5',
            //             'value': 'Text field input'
            //         }
            //     ]
            // };
            //
            // request.send(JSON.stringify(body));



        }
    })
}

var transformProp = function() {
    var t = document.createElement("div");
    if (null == t.style.transform) {
        var e = ["Webkit", "Moz", "ms"];
        for (var n in e)
            if (void 0 !== t.style[e[n] + "AnimationDelay"])
                return e[n] + "AnimationDelay"
    }
    return "animationDelay"
}();

if(inPage('.glitch')){
    const glitch = document.querySelector('.glitch');
    const glitchArr = glitch.querySelectorAll('.glitch_text');

    glitchArr.forEach(function (item, i) {
        let koef = 100/glitchArr.length;
        item.style[transformProp] = (i * .15) + 's';
        item.style.height = `${koef}%`;
        item.style.top = `${i * (koef)}%`;
        item.querySelector('span').style.transform = 'translateY(-'+ i * koef +'%)';
    })
}
if(inPage('.qa_box--more')) {
    const $moreBlock = document.querySelectorAll('.qa_box--more .qa_box__under');

    $moreBlock.forEach(function (item) {
        item.addEventListener('click', function (event) {
            const $qaBox = item.closest('.qa_box--more');
            const $qaHide = $qaBox.querySelector('.qa_hide');
            const $qaHideBox = $qaBox.querySelector('.qa_hide__box');

            if($qaBox.classList.contains('active')) {
                $qaBox.classList.remove('active');
                $qaHide.style.height = 0 + 'px';
            } else {
                $qaBox.classList.add('active');
                $qaHide.style.height = $qaHideBox.clientHeight + 'px';
            }
        })
    })
}


if(inPage('.wrapper_article')){
    var $wrapArticle = document.querySelector('.wrapper_article');
    document.querySelectorAll('.theme__item').forEach(function (item, i, arr) {
        item.addEventListener('click', function (event) {
            arr.forEach(function (item) {
                item.classList.remove('theme__item--active');
            });
            if(+item.dataset.theme){
                $wrapArticle.classList.add('wrapper_article--white');
                item.classList.add('theme__item--active');
            } else {
                $wrapArticle.classList.remove('wrapper_article--white');
                item.classList.add('theme__item--active');
            }
        });
    });
}

function fixedReck(){
    window.addEventListener('scroll', f);
    window.addEventListener('load', f);
    function f() {
        const newsInsideRek = document.querySelector('.share_block__right');
        const newsInsideRekHeight = newsInsideRek.getBoundingClientRect().height;
        const headerHeight = 70;
        const rekBox = document.querySelector('.share_block__box');
        const rekBoxHeight = rekBox.getBoundingClientRect().height;
        const result = newsInsideRekHeight - rekBoxHeight - headerHeight;
        const newsInsideRekTop = newsInsideRek.getBoundingClientRect().top;

        if( newsInsideRekTop < headerHeight ){
            rekBox.classList.add('share_block__box--fixed');
        }
        else{
            rekBox.classList.remove('share_block__box--fixed');
        }

        if(-newsInsideRekTop > result){
            rekBox.classList.add('share_block__box--bottom');
        }
        else{
            rekBox.classList.remove('share_block__box--bottom');
        }
    }
}

if(inPage('.section_share')){
    fixedReck();
}


//CANVAS
var isCan = false;

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

if(!('ontouchstart' in window) && inPage('#playground')){
    document.addEventListener('DOMContentLoaded', init, false);
} else {
    document.body.classList.add('body_bg');
}

var APP;

function init() {
    APP = new App();
    events();
    loop();
}

function loop() {
    APP.render();
    requestAnimationFrame(loop);
}

function events() {
    document.addEventListener('mousemove', APP.mousemoveHandler, false);
    document.addEventListener('mouseleave', APP.mouseleaveHandler, false);
    window.addEventListener('resize', APP.resize, false);
}

function removeEvents() {
    document.removeEventListener('mousemove', APP.mousemoveHandler, false);
    document.removeEventListener('mouseleave', APP.mouseleaveHandler, false);
    window.removeEventListener('resize', APP.resize, false);
}

var App =
    /*#__PURE__*/
    function () {
        function App() {
            _classCallCheck(this, App);

            this.canvas = document.getElementById('playground');
            this.context = this.canvas.getContext('2d');
            this.canvas.width = this.width = window.innerWidth;
            this.canvas.height = this.height = window.innerHeight;
            this.setupDots();
            this.resize = this.resize.bind(this);
            this.mousemoveHandler = this.mousemoveHandler.bind(this);
            this.mouseleaveHandler = this.mouseleaveHandler.bind(this);
        }

        _createClass(App, [{
            key: "setupDots",
            value: function setupDots() {
                this.dots = [];
                this.scl = 60;
                this.cols = this.width / this.scl;
                this.rows = this.height / this.scl;
                var id = 0;

                for (var x = 0; x < this.cols; x += 1) {
                    for (var y = 0; y < this.rows; y += 1) {
                        this.dots.push(new Dot(id, x * this.scl, y * this.scl, this.context, this.scl));
                        id += 1;
                    }
                }
            }
        }, {
            key: "resize",
            value: function resize() {
                this.canvas.width = this.width = window.innerWidth;
                this.canvas.height = this.height = window.innerHeight;
                this.setupDots();
            }
        }, {
            key: "mousemoveHandler",
            value: function mousemoveHandler(event) {
                this.dots.forEach(function (d) {
                    d.mousemove(event);
                });
            }
        }, {
            key: "mouseleaveHandler",
            value: function mouseleaveHandler() {
                this.dots.forEach(function (d) {
                    d.isHover = false;
                });
            }
        }, {
            key: "render",
            value: function render() {
                this.context.clearRect(0, 0, this.width, this.height);
                this.dots.forEach(function (d) {
                    d.render();
                });
            }
        }]);

        return App;
    }();

var Dot =
    /*#__PURE__*/
    function () {
        function Dot(id, x, y, context, scl) {
            _classCallCheck(this, Dot);

            this.id = id;
            this.x = x;
            this.y = y;
            this.new = {
                x: x,
                y: y
            };
            this.radius = 2;
            this.context = context;
            this.scl = scl;
            this.isHover = false;
            this.isANimated = false;
        }

        _createClass(Dot, [{
            key: "mousemove",
            value: function mousemove(event) {
                var x = event.clientX;
                var y = event.clientY;
                this.isHover = Math.abs(this.x - x) < this.scl / 4 * 3 && Math.abs(this.y - y) < this.scl / 4 * 3 ? true : false;

                if (this.isHover) {
                    TweenMax.to(this.new, 0.4, {
                        x: x,
                        y: y
                    });
                } else {
                    TweenMax.to(this.new, 0.4, {
                        x: this.x,
                        y: this.y
                    });
                }
            }
        }, {
            key: "render",
            value: function render() {
                this.context.beginPath();
                this.context.arc(this.new.x, this.new.y, this.radius, 0, 2 * Math.PI, false);
                this.context.fillStyle = 'rgba(100, 100, 100, 1)';
                this.context.globalAlpha = this.isHover ? 1 : 0.25;
                this.context.fill();
            }
        }]);

        return Dot;
    }();
window.addEventListener('DOMContentLoaded',()=>{});
/*! This file is auto-generated */
!function(c,d){"use strict";var e=!1,n=!1;if(d.querySelector)if(c.addEventListener)e=!0;if(c.wp=c.wp||{},!c.wp.receiveEmbedMessage)if(c.wp.receiveEmbedMessage=function(e){var t=e.data;if(t)if(t.secret||t.message||t.value)if(!/[^a-zA-Z0-9]/.test(t.secret)){for(var r,a,i,s=d.querySelectorAll('iframe[data-secret="'+t.secret+'"]'),n=d.querySelectorAll('blockquote[data-secret="'+t.secret+'"]'),o=0;o<n.length;o++)n[o].style.display="none";for(o=0;o<s.length;o++)if(r=s[o],e.source===r.contentWindow){if(r.removeAttribute("style"),"height"===t.message){if(1e3<(i=parseInt(t.value,10)))i=1e3;else if(~~i<200)i=200;r.height=i}if("link"===t.message)if(a=d.createElement("a"),i=d.createElement("a"),a.href=r.getAttribute("src"),i.href=t.value,i.host===a.host)if(d.activeElement===r)c.top.location.href=t.value}}},e)c.addEventListener("message",c.wp.receiveEmbedMessage,!1),d.addEventListener("DOMContentLoaded",t,!1),c.addEventListener("load",t,!1);function t(){if(!n){n=!0;for(var e,t,r=-1!==navigator.appVersion.indexOf("MSIE 10"),a=!!navigator.userAgent.match(/Trident.*rv:11\./),i=d.querySelectorAll("iframe.wp-embedded-content"),s=0;s<i.length;s++){if(!(e=i[s]).getAttribute("data-secret"))t=Math.random().toString(36).substr(2,10),e.src+="#?secret="+t,e.setAttribute("data-secret",t);if(r||a)(t=e.cloneNode(!0)).removeAttribute("security"),e.parentNode.replaceChild(t,e)}}}}(window,document);
